service: go-serverless-services
plugins:
  - serverless-offline
  - serverless-dotenv-plugin
frameworkVersion: '3'

custom:
  stage: ${opt:stage, 'dev'}

provider:
  name: aws
  runtime: go1.x
  region: ap-southeast-1
  stage: ${self:custom.stage}
  environment:
    MONGO_USER: ${ssm:/lambda/ahorro/prod/MONGO_USER}
    MONGO_PASSWORD: ${ssm:/lambda/ahorro/prod/MONGO_PASSWORD}
    MONGO_PATH: ${ssm:/lambda/swimpool/prod/MONGO_PATH}
    ACCESS_TOKEN_EXPIRATION_TIME: 900
    ACCESS_TOKEN_SECRET: ${ssm:/lambda/ahorro/prod/JWT_ACCESS_TOKEN_SECRET}
    REFRESH_TOKEN_EXPIRATION_TIME: 36000
    REFRESH_TOKEN_SECRET: ${ssm:/lambda/ahorro/prod/JWT_REFRESH_TOKEN_SECRET}
    TZ: Asia/Taipei
    DYNAMO_RAND_TABLE: AhorroUserRandstate-${self:custom.stage}
    SQS_URL:
      Ref: AhorroSyncQueue
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:ReceiveMessage"
      Resource:
        - !GetAtt AhorroSyncQueue.Arn
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
      Resource:
        - !GetAtt AhorroDynamoRandstate.Arn
package:
  individually: true
  exclude:
    - ./**
functions:
  dailyfetch:
    handler: bin/dailyfetch
    events:
      - httpApi:
          path: /crowd/daily
          method: get
    package:
      include:
        - bin/dailyfetch
  crowdscraper:
    handler: bin/crowdscraper
    events:
      - schedule: cron(0,30 0-13,23 * * ? *)
    package:
      include:
        - bin/crowdscraper
  swimnotify:
    handler: bin/swimnotify
    events:
      - schedule: cron(0 10 ? * 2 *)
      - httpApi:
          path: /notify
          method: get
    package:
      include:
        - bin/swimnotify
  fetchentries:
    handler: bin/fetchentries
    events:
      - httpApi:
          path: /entries
          method: get
    package:
      include:
        - bin/fetchentries
  login:
    handler: bin/login
    events:
      - httpApi:
          path: /auth/login
          method: post
    package:
      include:
        - bin/login
  refresh:
    handler: bin/refresh
    events:
      - httpApi:
          path: /auth/refresh
          method: post
    package:
      include:
        - bin/refresh
  sync_receive:
    handler: bin/sync_receiver
    events:
      - httpApi:
          path: /sync
          method: get
    package:
      include:
        - bin/sync_receiver
  sync_callback:
    handler: bin/sync_callback
    events:
      - httpApi:
          path: /sync/callback
          method: get
    package:
      include:
        - bin/sync_callback
  sync_hanlder:
    handler: bin/sync_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AhorroSyncQueue
              - Arn
    package:
      include:
        - bin/sync_handler
resources:
  Resources:
    AhorroSyncQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName:
          Fn::Join:
          - "-"
          - - AhorroSyncEntries
            - ${self:custom.stage}
        VisibilityTimeout: 300
    AhorroDynamoRandstate:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: UserId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        TableName:
          Fn::Join:
            - "-"
            - - AhorroUserRandstate
              - ${self:custom.stage}